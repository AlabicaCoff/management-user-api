// <auto-generated />
using System;
using ManagementUser.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManagementUser.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250413164707_Add a Super Admin User")]
    partial class AddaSuperAdminUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ManagementUser.API.Models.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("UserTitleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserTitleId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "47d9b5c2-9aff-484d-87b9-e8ebe16a5868",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0d0f2ba6-96e4-4ed6-a87d-5988084dbcac",
                            CreatedDate = new DateTime(2025, 4, 13, 23, 47, 7, 147, DateTimeKind.Local).AddTicks(1383),
                            Email = "SuperAdmin@ManagementUser.com",
                            EmailConfirmed = false,
                            FirstName = "Super",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@MANAGEMENTUSER.COM",
                            NormalizedUserName = "SUPERADMIN@MANAGEMENTUSER.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHCevet44SZKhYhNSru5vneoLjCOQ7D81zK95ZR/K3vSVTyxolp1LDrcUmEu7Z7rMg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce05acce-ac18-4551-9007-c8b5cd9e5d2a",
                            TwoFactorEnabled = false,
                            UserName = "SuperAdmin@ManagementUser.com",
                            UserTitleId = new Guid("2b28190b-de83-4263-8ad4-a69407f72113")
                        });
                });

            modelBuilder.Entity("ManagementUser.API.Models.Domain.ApplicationUserPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUserPermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6931b44-e2fd-4f7b-9503-ff2f77976737"),
                            PermissionId = new Guid("1bbc8dd6-43ac-48bd-8c1a-72fe753cdb61"),
                            UserId = "47d9b5c2-9aff-484d-87b9-e8ebe16a5868"
                        });
                });

            modelBuilder.Entity("ManagementUser.API.Models.Domain.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleatable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWritable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1bbc8dd6-43ac-48bd-8c1a-72fe753cdb61"),
                            IsDeleatable = true,
                            IsReadable = true,
                            IsWritable = true,
                            Name = "Super Admin"
                        },
                        new
                        {
                            Id = new Guid("3d408d29-dd7d-4c17-b670-ba1ae8f6b30e"),
                            IsDeleatable = false,
                            IsReadable = true,
                            IsWritable = true,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("4181a1f0-5e9b-47b2-bed8-0fc232089ebe"),
                            IsDeleatable = true,
                            IsReadable = true,
                            IsWritable = true,
                            Name = "HR Admin"
                        },
                        new
                        {
                            Id = new Guid("fc07f013-1939-4618-9617-0098aba1e71a"),
                            IsDeleatable = false,
                            IsReadable = true,
                            IsWritable = false,
                            Name = "HR"
                        },
                        new
                        {
                            Id = new Guid("94f06510-d4ac-4594-9462-79553d7a686d"),
                            IsDeleatable = false,
                            IsReadable = true,
                            IsWritable = false,
                            Name = "Employee"
                        },
                        new
                        {
                            Id = new Guid("8ec3db5a-0eed-4e47-a9fb-dab325d35690"),
                            IsDeleatable = false,
                            IsReadable = false,
                            IsWritable = false,
                            Name = "Intern"
                        });
                });

            modelBuilder.Entity("ManagementUser.API.Models.Domain.UserTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTitles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b28190b-de83-4263-8ad4-a69407f72113"),
                            Name = "Super Admin"
                        },
                        new
                        {
                            Id = new Guid("fe041e1f-6a8c-431f-8f71-ae0ec3cdcf17"),
                            Name = "CEO"
                        },
                        new
                        {
                            Id = new Guid("5d0b040d-36bc-48e8-960e-0e5564fcd3ee"),
                            Name = "CTO"
                        },
                        new
                        {
                            Id = new Guid("d41a4de8-69f0-46c2-bfea-c1037f09d5c3"),
                            Name = "HR Manager"
                        },
                        new
                        {
                            Id = new Guid("d11f7b70-e56d-47f3-abec-065233b16739"),
                            Name = "Sales"
                        },
                        new
                        {
                            Id = new Guid("18cb7a6e-e953-45ab-9ccd-a04743dfa9fa"),
                            Name = "Accountant"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9ab55ee9-52a9-45c9-ae26-1013c376b383",
                            ConcurrencyStamp = "9ab55ee9-52a9-45c9-ae26-1013c376b383",
                            Name = "isReadable",
                            NormalizedName = "ISREADABLE"
                        },
                        new
                        {
                            Id = "2f3acff7-944b-4c05-83dc-a4175d93a018",
                            ConcurrencyStamp = "2f3acff7-944b-4c05-83dc-a4175d93a018",
                            Name = "isWritable",
                            NormalizedName = "ISWRITABLE"
                        },
                        new
                        {
                            Id = "c6b9517f-4a39-4154-abb1-9811d825059b",
                            ConcurrencyStamp = "c6b9517f-4a39-4154-abb1-9811d825059b",
                            Name = "isDeletable",
                            NormalizedName = "ISDELETABLE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "47d9b5c2-9aff-484d-87b9-e8ebe16a5868",
                            RoleId = "9ab55ee9-52a9-45c9-ae26-1013c376b383"
                        },
                        new
                        {
                            UserId = "47d9b5c2-9aff-484d-87b9-e8ebe16a5868",
                            RoleId = "2f3acff7-944b-4c05-83dc-a4175d93a018"
                        },
                        new
                        {
                            UserId = "47d9b5c2-9aff-484d-87b9-e8ebe16a5868",
                            RoleId = "c6b9517f-4a39-4154-abb1-9811d825059b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ManagementUser.API.Models.Domain.ApplicationUser", b =>
                {
                    b.HasOne("ManagementUser.API.Models.Domain.UserTitle", "UserTitle")
                        .WithMany("Users")
                        .HasForeignKey("UserTitleId");

                    b.Navigation("UserTitle");
                });

            modelBuilder.Entity("ManagementUser.API.Models.Domain.ApplicationUserPermission", b =>
                {
                    b.HasOne("ManagementUser.API.Models.Domain.Permission", "Permission")
                        .WithMany("ApplicationUserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementUser.API.Models.Domain.ApplicationUser", "User")
                        .WithMany("ApplicationUserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ManagementUser.API.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ManagementUser.API.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ManagementUser.API.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ManagementUser.API.Models.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManagementUser.API.Models.Domain.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserPermissions");
                });

            modelBuilder.Entity("ManagementUser.API.Models.Domain.Permission", b =>
                {
                    b.Navigation("ApplicationUserPermissions");
                });

            modelBuilder.Entity("ManagementUser.API.Models.Domain.UserTitle", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
